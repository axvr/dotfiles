" ~/.vim/vimrc

filetype plugin indent on
if !exists('g:syntax_on') | syntax enable | endif

" Essentials.
set startofline hidden autoread display=truncate
set backspace=indent,eol,start nrformats=bin,hex,unsigned
set showmatch showcmd ruler history=10000 shortmess=aoOTt
set wildmenu wildoptions=pum,tagfile,fuzzy wildmode=lastused:full
set wildignore+=*/.git/*,*/node_modules/*,tags,.DS_Store,*/.cpcache/*
set mouse=a belloff=all smoothscroll scrolloff=0 sidescroll=1 nofoldenable
set hlsearch incsearch ttimeout ttimeoutlen=50
set formatoptions+=jpl1n cpoptions+=J joinspaces
set grepformat=%f:%l:%c:%m,%f:%l:%m
set expandtab tabstop=8 softtabstop=4 shiftwidth=4
set shiftround autoindent nosmarttab
set wrap showbreak=â†³\  linebreak breakindent
set path=.,,** clipboard=unnamed
set spelllang=en_gb dictionary=/usr/dict/words,/usr/share/dict/words
set sessionoptions=buffers,curdir,tabpages viewoptions=folds,cursor,curdir
set complete=.,w,b,u,t completeopt=menu,menuone,popup,fuzzy
if has('nvim') | set winborder=single | endif

" Backup, swap and undo.  (TODO: unify these between editors?)
if has('nvim')
    set backupdir-=.
else
    let &backupdir = expand($HOME.'/.vim/state/backup')
    let &directory = expand($HOME.'/.vim/state/swap')
    let &undodir   = expand($HOME.'/.vim/state/undo')
endif
set backup undofile
for s:dir in [&backupdir, &directory, &undodir]
    if !isdirectory(s:dir) | call mkdir(s:dir, 'p') | endif
endfor
unlet s:dir

" :help i_CTRL-U-default
inoremap <C-U> <C-G>u<C-U>

" "<Leader>" and "<LocalLeader>" prefixes.
let g:mapleader = " "
let g:maplocalleader = "\\"

" Clean up Neovim PopUp menu.
if has('nvim') && exists(':menu')
    aunmenu PopUp.-2-
    aunmenu PopUp.How-to\ disable\ mouse
endif

" Add custom text objects.
" <https://www.reddit.com/r/vim/comments/8iwuyq/substituting_vimsurround_snippet_plugins_with/dyvz96k/>
for s:char in ['_', '.', ':', ',', ';', '<bar>', '/', '<bslash>', '*', '+', '-', '%', '`']
    exec 'xnoremap i' .. s:char .. ' :<C-u>normal! T' .. s:char .. 'vt' .. s:char .. '<CR>'
    exec 'onoremap i' .. s:char .. ' :normal vi'      .. s:char .. '<CR>'
    exec 'xnoremap a' .. s:char .. ' :<C-u>normal! F' .. s:char .. 'vf' .. s:char .. '<CR>'
    exec 'onoremap a' .. s:char .. ' :normal va'      .. s:char .. '<CR>'
endfor
